// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(uuid())
  name            String     @db.VarChar(50)
  email           String     @unique @db.VarChar(50)
  password        String     @db.VarChar(255)
  isNameVisible   Boolean    @default(true) @map("is_name_visible")
  isEmailVisible  Boolean    @default(true) @map("is_email_visible")
  isEmailVerified Boolean    @default(false) @map("is_email_verified")
  verifiedAt      DateTime?  @map("verified_at")
  userType        UserType   @default(USER) @map("user_type")
  posts           Post[]
  comments        Comment[]
  reports         Report[]
  userLikes       UserLike[]

  @@map("users")
}

model Post {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  title     String
  content   String
  likes     Int       @default(0)
  dislikes  Int       @default(0)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @map("updated_at")
  published Boolean   @default(false)
  comments  Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @map("post_id")
  content   String
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @map("updated_at")
  published Boolean  @default(false)

  @@map("comments")
}

model Report {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("user_id")
  publishType   PublishType
  postCommentId String
  content       String?
  reportedAt    DateTime    @default(now()) @map("reported_at")

  @@map("reports")
}

model UserLike {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @map("user_id")
  publishType   PublishType
  postCommentId String
  liked         Boolean

  @@map("user_likes")
}

enum UserType {
  USER
  MODERATOR
}

enum PublishType {
  POST
  COMMENT
}